[
  {
    "content": null,
    "url": "https://glebbahmutov.com/blog/code-coverage-for-chat-tests/",
    "_tags": [
      "code-coverage-for-chat-tests"
    ],
    "hierarchy": {
      "lvl0": "Code Coverage For Chat App"
    },
    "type": "lvl0",
    "scrapedTimestamp": 1644292461182
  },
  {
    "anchor": "code-instrumentation",
    "content": null,
    "url": "https://glebbahmutov.com/blog/code-coverage-for-chat-tests/#code-instrumentation",
    "_tags": [
      "code-coverage-for-chat-tests"
    ],
    "hierarchy": {
      "lvl0": "Code Coverage For Chat App",
      "lvl1": "Code instrumentation"
    },
    "type": "lvl1",
    "scrapedTimestamp": 1644292461182
  },
  {
    "anchor": "the-first-spec",
    "content": null,
    "url": "https://glebbahmutov.com/blog/code-coverage-for-chat-tests/#the-first-spec",
    "_tags": [
      "code-coverage-for-chat-tests"
    ],
    "hierarchy": {
      "lvl0": "Code Coverage For Chat App",
      "lvl1": "The first spec"
    },
    "type": "lvl1",
    "scrapedTimestamp": 1644292461182
  },
  {
    "anchor": "mock-socket-spec",
    "content": null,
    "url": "https://glebbahmutov.com/blog/code-coverage-for-chat-tests/#mock-socket-spec",
    "_tags": [
      "code-coverage-for-chat-tests"
    ],
    "hierarchy": {
      "lvl0": "Code Coverage For Chat App",
      "lvl1": "Mock socket spec"
    },
    "type": "lvl1",
    "scrapedTimestamp": 1644292461182
  },
  {
    "anchor": "second-user-via-socket-connection",
    "content": null,
    "url": "https://glebbahmutov.com/blog/code-coverage-for-chat-tests/#second-user-via-socket-connection",
    "_tags": [
      "code-coverage-for-chat-tests"
    ],
    "hierarchy": {
      "lvl0": "Code Coverage For Chat App",
      "lvl1": "Second user via socket connection"
    },
    "type": "lvl1",
    "scrapedTimestamp": 1644292461182
  },
  {
    "anchor": "run-two-test-runners",
    "content": null,
    "url": "https://glebbahmutov.com/blog/code-coverage-for-chat-tests/#run-two-test-runners",
    "_tags": [
      "code-coverage-for-chat-tests"
    ],
    "hierarchy": {
      "lvl0": "Code Coverage For Chat App",
      "lvl1": "Run two test runners"
    },
    "type": "lvl1",
    "scrapedTimestamp": 1644292461182
  },
  {
    "anchor": null,
    "content": "How to measure fullstack code coverage from Cypress tests. \nIn several blog posts I have shown how to test a Socket.io chat application using Cypress.io\nIn this blog post I will show how to collect code coverage in each case. From the code coverage reports, we will see that using separate test runners to simulate two users is not necessary. The application code is already exercised when using a separate socket connection to simulate the second user. Even a test with 1 user going through the user interface covers 100% of the code, because every message, even own message, goes through the server before being shown.\nüéÅ You can find the source code in the repo bahmutov/cypress-socketio-chat. You can also flip through the slides for the presentation covering this topic at slides.com/bahmutov/e2e-for-chat.",
    "url": "https://glebbahmutov.com/blog/code-coverage-for-chat-tests/",
    "_tags": [
      "code-coverage-for-chat-tests"
    ],
    "hierarchy": {
      "lvl0": "Code Coverage For Chat App"
    },
    "type": "content",
    "scrapedTimestamp": 1644292461182
  },
  {
    "anchor": "code-instrumentation",
    "content": "The application includes the source code using a script tag\nFrom the server, we can instrument the scripts/app.js source code before sending\nTo check if the code has been instrumented, inspect the window.__coverage__ object from the DevTools console.\nCode coverage object exists\nWe can also instrument the server code using nyc module following the Instrument backend code section of the Cypress docs.\nChange the start server command\nAnd expose the code coverage endpoint\n// https://github.com/cypress-io/code-coverage#instrument-backend-code\n/* istanbul ignore next */\nTo ensure the code coverage report always includes the client and the server code, add to the package.json \"nyc\" options\nTip: if you need to instrument your application code, find an example matching your situation among the examples in the Cypress code coverage plugin repo.",
    "url": "https://glebbahmutov.com/blog/code-coverage-for-chat-tests/#code-instrumentation",
    "_tags": [
      "code-coverage-for-chat-tests"
    ],
    "hierarchy": {
      "lvl0": "Code Coverage For Chat App"
    },
    "type": "content",
    "scrapedTimestamp": 1644292461182
  },
  {
    "anchor": "the-first-spec",
    "content": "Our first spec uses a single test runner to send the message to itself.\n/// <reference types=\"cypress\" />\n// https://on.cypress.io/visit\n// when the application asks for the name\n// return \"Cy\" using https://on.cypress.io/stub\n// make sure the greeting message is shown\n// try posting a message\nThe generated HTML report shows full client-side code coverage.\nFirst spec code coverage report\nDrill down into the server file to see the two missed lines\nFirst spec never disconnects from the server\nUnfortunately, it is hard to test the user disconnect if our page is the only one present.",
    "url": "https://glebbahmutov.com/blog/code-coverage-for-chat-tests/#the-first-spec",
    "_tags": [
      "code-coverage-for-chat-tests"
    ],
    "hierarchy": {
      "lvl0": "Code Coverage For Chat App"
    },
    "type": "content",
    "scrapedTimestamp": 1644292461182
  },
  {
    "anchor": "mock-socket-spec",
    "content": "In another spec we replace the actual socket connection with the Mock Socket object.\n/// <reference types=\"cypress\" />\n// these tests \"trick\" the application by injecting\n// a mock socket from the test into the application\n// instead of letting the application connect to the real one\n// store info about the client connected from the page\n// broadcast to everyone, mimicking the index.js server\n// delete any cache headers to get a fresh response\n// the browser is the 1st user\n// our code intercept has worked\n// verify we have received the username\n// use .should(callback) to retry\n// until the variable username has been set\n// try sending a message via page UI\n// verify the mock socket has received the message\n// emit message from the test socket\n// to make sure the page shows it\nBecause we do not run any socket commands on the server, our server-side coverage drops.\nCode coverage summary when mocking the Socket\nThe server report shows no socket callbacks have executed.\nWhen mocking the socket client-side, the server is not used",
    "url": "https://glebbahmutov.com/blog/code-coverage-for-chat-tests/#mock-socket-spec",
    "_tags": [
      "code-coverage-for-chat-tests"
    ],
    "hierarchy": {
      "lvl0": "Code Coverage For Chat App"
    },
    "type": "content",
    "scrapedTimestamp": 1644292461182
  },
  {
    "anchor": "second-user-via-socket-connection",
    "content": "Let's run the test that uses the UI page as the first user, while connecting to the server through another socket connection to simulate the 2nd user. For example, we can open that 2nd socket connection from the spec.\n/// <reference types=\"cypress\" />\n// the browser is the 1st user\n// make sure the greeting message is shown\n// and now connect to the server using 2nd user\n// by opening a new Socket connection from the same browser window\n// keep track of the last message sent by the server\n// the page shows that the second user has joined the chat\n// the second user can send a message and the page shows it\n// when the first user sends the message from the page\n// the second user receives it via socket\n// verify the web page shows the message\n// this ensures we can ask the 2nd user for its last message\n// and it should already be there\n// place the assertions in a should callback\n// to retry them, maybe there is a delay in delivery\n// using \"include\" assertion since the server adds HTML markup\nNote that this test disconnects the second user and confirms the page shows the right message.\nThe Cypress test UI\nThe fullstack code coverage achieves 100% for both the client and the server files.\nThe code coverage report shows 100% code coverage\nThe server really exercised all Socket commands.\nThe server coverage during the test",
    "url": "https://glebbahmutov.com/blog/code-coverage-for-chat-tests/#second-user-via-socket-connection",
    "_tags": [
      "code-coverage-for-chat-tests"
    ],
    "hierarchy": {
      "lvl0": "Code Coverage For Chat App"
    },
    "type": "content",
    "scrapedTimestamp": 1644292461182
  },
  {
    "anchor": "run-two-test-runners",
    "content": "Now let's switch to the more complicated way of verifying the chat between two users - by running two test runners. Does it give us any more confidence? Does it cover any more code lines? Well, it would be hard to cover more lines, since we already have reached 100% code coverage!\nWe will run two test runners and they will wait for each other using checkpoints. For example, here are the ends of the two spec files where the first user disconnects by going away from the page localhost:8080 and the second user confirms it sees the message \"First left the chat\"\n// disconnect from the chat by visiting the blank page\n// the first user will disconnect now\nThe code coverage stays the same: more lines might be repeated, but no new lines can possible be added to the already full coverage.\nHappy fullstack testing!",
    "url": "https://glebbahmutov.com/blog/code-coverage-for-chat-tests/#run-two-test-runners",
    "_tags": [
      "code-coverage-for-chat-tests"
    ],
    "hierarchy": {
      "lvl0": "Code Coverage For Chat App"
    },
    "type": "content",
    "scrapedTimestamp": 1644292461182
  }
]